
day 1 of parallel C++:
======================			

C/C++ (Phase II)
----------------

			program
			|
			|---> pre-processing
			|
			V
			Source
		    /   |
	       assembly |---> compilation (declarations)
		    \   |
			V
			Object file
			|
			|---> linking (definitions)
			|
			V
			Executable


	int x; 		// declaration
	int x = 100;	// definition

	// when you use extern keyword, its declaration only:
	extern int x;	// declaration only

	// This is because, compiler has something called:
	// ODR = One Definition Rule.

==========================================================================

What is pre-processing?
	
	instructions to pre-processor
		OR
	preprocessor directives

	in C/C++ any statements starting with "#" is a preprocessor directive.
	in line: "#include <stdio.h>",
	include is the directive and stdio.h is the argument.

	what "include" does is include the contents of header file into our current program.
	please note that <> is for system headers and "" is for user defined headers.
	This is done to optimize the searching of header files when the preprocessor runs.
	
	Linux has a directories called:
	/include
	and 
	/usr/include

	When you use <>, your preprocessor knows to search in these directories,
	for system header files. 

	When you use "", your preprocessor searches for header files in,
	current working directory.

	This is how searching for header files is optimized.

	#include<> helps include the declarations into your program.

	Inorder to tell compiler to include certain header files in some directory,
	we can use -I option while compiling our program.
	syntax:
	$gcc -I directory_path filename.c
	for eg:
	if your header files are in current working directory, then use:
	$gcc -I . filename.c

	Then you can use user defined headerfiles with <>.

	Other pre-processor directives:
	
	#define
	#ifndef
	#endif
	#if
	#else

===========================================================================

for only seeing compilation errors, using "-c" option while compiling:
gcc program2Main.c -c

This helps you avoid viewing the linker errors, only compilation errors are displayed.
This also creates an object file. Using these object files you can also create executable files.


Similarly we can use options like:

"-E" for pre-processing only
"-S" for generating assembly code.


For now we can do this to generate an object file:
gcc program2Main.c -c

and this to generate executable file from object file:
gcc -o myout program2Main.o programTwo.c


for analyzing object/executable files, use these commands and options:
use:
->od			// octal dump
see:
https://man7.org/linux/man-pages/man1/od.1.html

->hexdump		// hexadecimal dump
see: 
https://en.wikipedia.org/wiki/Hex_dump
https://man7.org/linux/man-pages/man1/hexdump.1.html

->xxd			
see:
https://linux.die.net/man/1/xxd
 
->objdump		// object dump
see:
https://man7.org/linux/man-pages/man1/objdump.1.html


================================================================

Detailed discussion on how we can shift declarations into header files.
and also we can shift function definitions into other files and
main function in a separate file.
Later, when we compile, we mention all files and they are linked together using linker.

================================================================

In C++,
even in case of classes, 
we can separate declaration, usage and definitions into separate files.
i.e.: 
preprocessors and all class member declarations in a header file.
main function in other file.
class member definitions (using scope resolution operator) in other file.

In C++ terminology:
declaration = abstraction
definition = usage

see folder withClass for more details.

compile the main file to create an object file using:
g++ Main.cpp -c

then create an executable using:
g++ -o exec Main.o encapsulation.cpp

================================================================

Instead of typing all files which have function definition,
we can bundle all these files in a "archive". 

This is similar to jar files in java.

use the following command to archive all files which have definitions:
$ar -q mylib.a fun.o fun1.o fun2.o ....

After this an archive file called "mylib.a",
in windows we call it lib files or static library files.
in linux we call it archive files.

Other options:
-a = append
-d 
-r = replace

there are many more options, use "man ar" to learn more.


Finally, when you create an executable instead of using:
$g++ -o exec Main.o -I . encapsulation1.o encapsulation2.o ... encapsulationn.o
we will use:
$g++ -o exec Main.o -I . mylib.a
to create an executable file.

to summarize, after creating all files, run the following commands:

$g++ Main.cpp -c
$g++ Encapsulation1.cpp -c
...
$g++ Encapsulationn.cpp -c
$ar -q encapArchive.a Encapsulation1.o Encapsulation2.o ... Encapsulation3.o
$g++ -o executablefilename Main.o -I . encapArchive.a

================================================================

This multi file approach for storing cpp programs is used in the industry.

The general folder structure of a cpp project is as follows:
"src"		// all c/c++ code is stored here
"include"	// all header files stored here
"bin"		// all executables aka binaries are stored here
"lib"		// object files stored here (archive files like .a files are also stored here)
"doc"		// all documentation is stored here

================================================================

What are shared object (.so) and dynamic link library (.dll)?
-------------------------------------------------------------

Linux					Windows

name.a (archive)			name.lib (static library)

name.so (shared object)			name.dll (dynamic link library)



during linking we can give,
.c, .o, .a and .so files and compiler will accept.

In windows, you may have heard of .dll file error.
That means this file is needed everytime you run a specific program.
its a dynamic link library.
similarly in linux, you need .so which is a shared object file.

so whats the different about .dll and a regular definition files.
when you use nm command all names of identifiers are shown.
in dynamic link library everything will be separate, 
function name will be separate and sometimes you will see undefined.

when you do,
$nm filename.c
you can see some functions have an address and some functions like
printf that come from glib which stands for gnu library and its address is not given.

ldd ./executable
you will see which functions are loaded from which library and its address.
here, ld is our linker and loader

=============================================


creating .so files in linux is simple.

here's a STEP BY STEP guide:


1. 
simple do this for all files with definitions:
$gcc -c -fPIC filename.c

here -fPIC stands for: 
add functionality of Position Independent Code.
In Microsoft Windows they call it as "Relocatable Address".


2. 
to create a .so file:
$gcc -shared -o libMine.so *.o

to see more info on that file:
$file libMine.so

you can see that that file is a shared object file.
now you can remove all object files from that directory by running:
$rm *.o

3. 
now you can create an executable by running:
$gcc -o myout testMain.c -L. -lMine

note that -L. is for specifying additional linking directory


you will see that shared object is not loaded by running:
$ldd myout

4. 
then run this:
$export LD_RUN_PATH=./
LD_RUN_PATH specifies the directories that are to be searched for libraries at both link and run time.

5. 
and again run this:
$gcc -o myout testMain.c -L. -lMine
this time if you run 
$ldd myout
you will find that object is loaded (and its address is visible) and ready to execute.
and then run the executable:
$./myout

notice that we used the option: 
-L.
that means we want to get our shared object from current directory
then we used option:
-lMine
here, name of library is libMine, as we can see it is convention,
for libraries to have "lib" as prefix,
the real name of library is "Mine"
that is what we specified in that option "-lMine",
generally you will use option like: "-lFilename" 

======================================================================

In next session, we will learn how to automate all this instead of doing it manually.


