day 2:
======

Instructor says he's told to wrap up parallel C++ within 2 days.\
Python programming will start from next week.

Parallelism (and terminologies associated with it):
	1. Multi-programming.
		In 70s and 80s, there were only single core processors.
		Later, engineers decided to increase cores to increase processing speed.
		Demand for parallelism increased as GUI became mainstream.
		Windows NT = Windows "New Technology"

		Important concept is "time-sharing":

		10^-3 = 1 millisecond.
		10^-9 = 1 nanosecond.

		We will give time-slices to each processes.
		for eg: 10 millisecond per process.
		then, in 1 second we will have 100 time slices.

		This is implemented in a uni-processor machines (only 1 core).
		Note that at any point of time, only one process is running.
		but from user's pov, in 1 second, 100 processes are running.

		This is the form of parallelism that was introduced in old times.
		This is called multi-programming.
		Multiple programs running in a processor by using time-sharing.

	2. Multi-processing.
		
		In modern times, only processors with more than 
		1024 cores are considered supercomputers.
		Using time-sharing to run multiple programs on multiple cores,
		is called multi-processing.

	3. Multi-threading.
	
		In real world applications, user's reaction time is very slow.
		Therefore, I/O is something that can cause delays in system.
		Here's were I/O queue comes into play.
		Many processes in I/O queue can go to sleep,
		while a particular processing in foreground can keep running.
		
		To give an example:
		In a single process,
		we can handle user interaction with one thread.
		and background processing and tasks is handled by another thread.
		and I/O is handled by other thread. 
		This helps us keep I/O over the N/W while doing background
		processing and keeping our UI responsive to user input.

		Thread is a light weight process.
		Its lightweight because data that they access is shared.
		This makes context switching between threads is fast.
		Sun microsystems came up with this in their UNIX OS called Solaris.

		CPU is the most important resource for processing.
		For maximum utilization of CPU, we need to increase throughput,
		i.e. getting many tasks done in minimum time.

		
		
		
In C Programming,
	we have something called 
		1. fork()
			It helps us create new/child process.
		2. pthread (POSIX thread) library has a create()
			It helps us create a thread.
			
		
Modern C++ provides thread library.
	in linux OS it uses pthreads and in 
	Windows it uses MicroSoft's thread libraries


=============================================================================


Parallelism:

	1. fork():
		see:
		forkDemo.c
		
		fork() creates a new process from another process.
		for eg:

		When you use one fork()
		./a.out
		|
		|fork()
		|----------|
		|          |
		V          V
		pf()	   pf()

		~ly:
		
		When you use 2 fork()

		
		./a.out
		|
		|fork()
		|---------------------------
		| fork()       		   |fork()
		|----          		   |----
		|   |			   |   |
		|   |			   |   |
		V   V 			   V   V
		pf() pf() 		   pf() pf()
		

		~ly:
		When you use 3 fork() you get 8 pf()

		and so on.

		This is how fork() is creating new processes.


		In linux operating system, init is the initial process
		when the OS boots up. 
		It has the pid of 1.

		depending on return value of fork(), we can
		find out what happened.
		
		fork() creates a new process, 
		so you now have two identical processes. 
		To distinguish between them, the return value of fork() differs.

		Upon successful completion, 
		fork() returns 0 to the child process and 
		returns the process ID of the child process to the parent process. 
		Otherwise, -1 is returned to the parent process, 
		no child process is created, and errno is set to indicate the error.


	2. getpid() and getppid()
	3. getuid() and geteuid() (user id and effective user id)
	4. gid() and egid()

	see getallid.cpp


Input and Output buffer during exit:

	C++ has something called input and output buffers.
	like in a word document, you need to press ctrl+s to save doc.
	Till then everything is written to a temporary memory called buffer.

	exit(0) will stop the process and flush all buffers.
	_exit(0) will stop the process without flushing all buffers.
	
Abrupt terminations:
	segfaults (sigsegv)
	exceptions



